=========================================================================
=========================================================================
=========================== DESIGN PATTERN OOP ==========================
=========================================================================
=========================================================================

I/ Creational Pattern: Nhóm khởi tạo – 5 mẫu gồm: Factory Method, Abstract Factory, Builder, Prototype, Singleton.
	2/ Abstract Factory: Cung cấp một interface có chức năng tạo ra các đối tượng liên quan mà không chỉ ra những lớp cụ thể nào ở thời điểm thiết kế.
	- Ex:
	<?php
	abstract class AnimalFactory
	{
	    public abstract function CreatePet();
	    public abstract function CreateWild();
	}

	class DogAnimalFactory extends AnimalFactory
	{
	    public function CreatePet()
	    {
	        return 'Create Dog';
	    }

	    public function CreateWild()
	    {
	        return 'Create AfricanWildDog';
	    }
	}

	class CatAnimalFactory extends AnimalFactory
	{
	    public function CreatePet()
	    {
	        return 'Create Cat';
	    }

	    public function CreateWild()
	    {
	        return 'Create Tiger';
	    }
	}

	class MyAnimal
	{
		private $factory;
		
	    function __construct(AnimalFactory $animalFactory) {
	        $this->factory = $animalFactory;
	    }

	    public function getPet()
	    {
	        return $this->factory->CreatePet();
	    }

	    public function getWild()
	    {
	        return $this->factory->CreateWild();
	    }
	}

	//
	$animal = new MyAnimal(new CatAnimalFactory());
	$cat = $animal->getPet();
	$tiger = $animal->getWild();

	var_dump($cat);
	var_dump($tiger);
	
	4/ Prototype pattern: 
	- The prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.
	- Mục đích của pattern này là tạo ra một đối tượng mới bằng cách sao chép một nguyên mẫu (nôm na là một đối tượng khác).
	- Ex:
	<?php
	class BookPrototype {
		protected $title;
		protected $category = 'IT';

		public function __construct()
		{
			
		}

		public function setTitle($title)
		{
			$this->title = $title;
		}

		public function getTitle()
		{
			return $this->title;
		}

		public function __clone()
		{
			# code...
		}
	}

	$itBook = new BookPrototype();
	$itBook->setTitle('Learning PHP Prototype Pattern');
	
	// Shallow copy
	$itBookClone = $itBook;
	$itBookClone->setTitle('PHP Master');
	echo $itBook->getTitle(); 		// 'PHP Master'
	echo $itBookClone->getTitle(); 	// 'PHP Master'

	// Deep copy
	$itBookClone = clone $itBook;
	$itBookClone->setTitle('PHP Master');
	echo $itBook->getTitle(); 		// 'Learning PHP Prototype Pattern'
	echo $itBookClone->getTitle(); 	// 'PHP Master'
	
	5/ Singleton: Đảm bảo chỉ duy nhất một thể hiện (instance) được tạo ra và nó sẽ cung cấp cho bạn một method để có thể truy xuất được thể hiện duy nhất đó mọi lúc mọi nơi trong chương trình.
	- Ex:
		<?php
		class Singleton
		{
			private static $instances = [];
		    public static function getInstance()
		    {
		        $cls = static::class;
		        if (!isset(self::$instances[$cls])) {
		            self::$instances[$cls] = new static();
		        }

		        return self::$instances[$cls];
		    }

		    /**
		     * Protected constructor to prevent creating a new instance of the
		     * *Singleton* via the `new` operator from outside of this class.
		     */
		    protected function __construct()
		    {
		    }

		    /**
		     * Private clone method to prevent cloning of the instance of the
		     * *Singleton* instance.
		     *
		     * @return void
		     */
		    private function __clone()
		    {
		    }

		    /**
		     * Private unserialize method to prevent unserializing of the *Singleton*
		     * instance.
		     *
		     * @return void
		     */
		    private function __wakeup()
		    {
		    }
		}

		class SingletonChild extends Singleton
		{
		}

		$obj = Singleton::getInstance();
		var_dump($obj === Singleton::getInstance());             // bool(true)

		$childObj = SingletonChild::getInstance();
		var_dump($childObj === Singleton::getInstance());      // bool(false)

		var_dump($childObj === SingletonChild::getInstance()); // bool(true)


II/ Structural Pattern: Nhóm cấu trúc – 7 mẫu gồm: Adapter, Bridge, Composite, Decorator, Facade, Flyweight và Proxy.
	5/ Facade: Cung cấp class/function có những tính năng đơn giản hơn, để che dấu những tập xử lý phức tạp của nhiều class/function con.
	- Ex:
		class CPU {
		    public void freeze() { ... }
		    public void jump(long position) { ... }
		    public void execute() { ... }
		}

		class HardDrive {
		    public byte[] read(long lba, int size) { ... }
		}

		class Memory {
		    public void load(long position, byte[] data) { ... }
		}

		/* Facade */

		class ComputerFacade {
		    private CPU processor;
		    private Memory ram;
		    private HardDrive hd;

		    public ComputerFacade() {
		        this.processor = new CPU();
		        this.ram = new Memory();
		        this.hd = new HardDrive();
		    }

		    public void start() {
		        processor.freeze();
		        ram.load(BOOT_ADDRESS, hd.read(BOOT_SECTOR, SECTOR_SIZE));
		        processor.jump(BOOT_ADDRESS);
		        processor.execute();
		    }
		}

		/* Client */
		class You {
		    public static void main(String[] args) {
		        ComputerFacade computer = new ComputerFacade();
		        computer.start();
		    }
		}

III/ Behavioral Pattern
	1/Strategy: Mẫu thiết kế dành cho hành động lặp lại nhiều lần lên method, function, tách nó ra thành 1 phần độc lập.
	Định nghĩa, kế thừa và xử lý theo từng loại riêng biệt.
	Vd: class Context, interface StrategyInterface, multi strategy(FirstConcreteStrategy, SecondConcreteStrategy, ...)

		<?php

		interface StrategyInterface {
		    /**
		     * Do something.
		     */
		    public function handle();
		}

		class Context {
		    /**
		     * @var StrategyContract
		     */
		    private $strategy;
		   

		    /**
		     * Context constructor.
		     * 
		     * @param StrategyContract $strategy
		     * @throws Exception
		     */
		    public function __construct(StrategyInterface $strategy)
		    {
		        if (isset($this->strategy)) {
		            throw new Exception("Contract is already present.");
		        }
		        $this->strategy = $strategy;
		    }

		    /**
		     * Call strategy handle() method.
		     */
		    public function handle()
		    {
		        $this->strategy->handle();
		    }
		}

		class FirstConcreteStrategy implements StrategyInterface {
		    
		    /**
		     * {@inheritdoc}
		     */
		    public function handle()
		    {
		        echo PHP_EOL . 'DOING SOMETHING' . PHP_EOL;
		    }
		}

		class SecondConcreteStrategy implements StrategyInterface {
		    
		    /**
		     * {@inheritdoc}
		     */
		    public function handle() {
		        echo PHP_EOL . 'DOING SOMETHING SLIGHT DIFFERENTLY' . PHP_EOL;
		    }
		}

		//
		$context = new Context(new FirstConcreteStrategy());
		$context->handle();

		$second_context = new Context(new SecondConcreteStrategy());
		$second_context->handle();

IV/ Other Pattern
1/ Repository
	- Là tầng trung gian giữa business logic và data access
	- Ex:
		+ Provider config:
			'providers' => [
			...
			    App\Providers\RepositoryServiceProvider::class,
			],

		+ New provider service
			use App\Contracts\Repositories\PropductRepositoryInterface;
			use App\Repositories\ProductRepository;

			public function register()
			{
			   $this->app->bind(ProductRepositoryInterface::class, ProductRepository::class);
			}

		+ Controller:
			namespace App\Http\Controllers;
			use ProductRepositoryInterface;

			class ProductController extends Controller
			{
				protected $productRepository;

				public function __construct(ProductRepositoryInterface $productRepository)
				{
					$this->productRepository = $productRepository;
				}

				public function getProduct()
				{
					$products = $this->productRepository->getProductOrderById();
					return view('product.index', compact('products'));
				}
			}

		+ Repository
			namespace App\Repositories;
​
			use App\Models\Product;
			​
			class ProductRepository implements ProductRepositoryInterface
			{
			{
			    //override
			    public function getProductOrderById()
			    {
			        return Product::orderBy('id', 'desc')->get();
			    }
			}

		+ Base interface
			namespace App\Contracts\Repositories;

			interface BaseRepositoryInterface
			{
			    public function model();
			    public function getAll();
			    public function create(array $data);
			    public function show(int $id);
			    public function edit(int $id);
			    public function delete(int $id);
			    ....
			}

		+ interface
			namespace App\Contracts\Repositories;

			interface ProductRepositoryInterface extends BaseRepositoryInterface
			{
			    public function getFulfilledProduct(int $productId);
			    public function getProductTags(int $productId);
			    .....
			}
